plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.4'
	id 'io.spring.dependency-management' version '1.1.0'
	id "jacoco"
}

group = 'com.tenpo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// lombok
	compileOnly 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:1.18.26'
	testCompileOnly 'org.projectlombok:lombok:1.18.26'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

	// retry
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework:spring-aspects'

	// cache
	implementation 'org.redisson:redisson-spring-boot-starter:3.20.0'
	implementation 'redis.clients:jedis'

	// rate limit
	implementation 'com.giffing.bucket4j.spring.boot.starter:bucket4j-spring-boot-starter:0.9.0'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'com.h2database:h2'
	testImplementation 'org.mockito:mockito-inline'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('jar') {
	enabled = false
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required.set(true)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}
	afterEvaluate {
		classDirectories.from = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
			        "**/constants/**",
			        "**/exception/**",
			        "**/_shared/rate_limit/**",
			        "**/_shared/async/**",
					"**/domain/model/**",
					"**/api/presentation/**",
					"**/api/communication/**",
					"**/configuration/**",
					"**/dto/**"
			])
		})
	}
}
